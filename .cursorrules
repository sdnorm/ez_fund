You are an expert in Ruby on Rails, PostgreSQL, Hotwire (Turbo and Stimulus), and Tailwind CSS.
  - Use TailwindStimulus for Stimulus components. https://github.com/excid3/tailwindcss-stimulus-components

  Code Style and Structure
  - Write concise, idiomatic Ruby code with accurate examples.
  - Follow Rails conventions and best practices.
  - Use object-oriented and functional programming patterns as appropriate.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable and method names (e.g., user_signed_in?, calculate_total).
  - Structure files according to Rails conventions (MVC, concerns, helpers, etc.).

  Naming Conventions
  - Use snake_case for file names, method names, and variables.
  - Use CamelCase for class and module names.
  - Follow Rails naming conventions for models, controllers, and views.

  Ruby and Rails Usage
  - Use Ruby 3.x features when appropriate (e.g., pattern matching, endless methods).
  - Leverage Rails' built-in helpers and methods.
  - Use ActiveRecord effectively for database operations.

  Syntax and Formatting
  - Follow the Ruby Style Guide (https://rubystyle.guide/)
  - Use Ruby's expressive syntax (e.g., unless, ||=, &.)
  - Prefer double quotes for strings.
  - Use double quotes for strings in Ruby. 
  - Follow Rubocop for linting and formatting.

  Error Handling and Validation
  - Use exceptions for exceptional cases, not for control flow.
  - Implement proper error logging and user-friendly messages.
  - Handle errors gracefully in controllers and display appropriate flash messages.
  - Use Alert from TailwindStimulus for flash messages.
  - Use Database constraints for validations for data. And use Stimuls to force validation on the client. 

  UI and Styling
  - Use Hotwire (Turbo and Stimulus) for dynamic, SPA-like interactions.
  - Implement responsive design with Tailwind CSS.
  - Use Rails view helpers and partials to keep views DRY.

  Performance Optimization
  - Use database indexing effectively.
  - Implement caching strategies (fragment caching, Russian Doll caching).
  - Use eager loading to avoid N+1 queries.
  - Optimize database queries using includes, joins, or select.
  - Will be using SolidCache, SolidQueue, and SolidCable for caching, queuing, and real-time communication.

  Key Conventions
  - Follow RESTful routing conventions.
  - Use concerns for shared behavior across models or controllers.
  - Do not implement service objects. Use models (with or without a corresponding Database table) or concerns instead.
  - Use background jobs (e.g., ActiveJob) for time-consuming tasks or tasks that should be performed asynchronously.

  Testing
  - Write comprehensive tests using Minitest.
  - Follow TDD/BDD practices.
  - Use fixtures or create Active Record objects for test data generation.

  Security
  - Implement proper authentication and authorization (using Devise, Pundit).
  - Use strong parameters in controllers.
  - Protect against common web vulnerabilities (XSS, CSRF, SQL injection).

  Follow the official Ruby on Rails guides for best practices in routing, controllers, models, views, and other Rails components.

App Structure and Functionality context
- This app will provide Organizations (starting with primary/elementary schools) an easy fundraising platform. A school administrator (Organization owner) will easily be able to upload a CSV of Participants after the succesful creation of a Campaign. The Participants will have a first_name, last_name, etc. They can also be tied to a Champion. There will be a unique code made upon the successful creation of CampaignParticipants. There will also be a QR code generated for ease of getting to the Particiapnts Calendar. Once a Calendar is fully purchased a new one can be created (ie. Calendar 2) as to not limit any possible fundraising. 

- We will use Stripe Connect for the Organizations to sign up. We can use [pay-rails/pay: Payments for Ruby on Rails apps](https://github.com/pay-rails/pay). 

- There should be some generic documentation available to the Orgnaziation to pass out. The idea is to make things as easy as possbile on the Organization. Documentation being things like flyers to pass out to participants and their guardians. 

- The fundraising happens by Donors purcashing a day on an arbitrary calendar (arbitrary in that it is not tied to an actual month. It is just 31 days). The Donor (who does not have to log in) can select multiple days to purchase at once. When the a day is selected by one Donor, use TurboStreams to automatically broadcast an update to any other possible Donor(s) viewing the same Calendar. The CalendarDay should have the status of “selected”. That status should last either for 4 minutes, the Donor that selected the day purchases it, or the Donor that selected it navigates away from the Calendar view. So, a CalendarDay can have the statues of “available”, “selected”, or “purchased”. 

- Once a day or days are purcahsed they should be updated in the Database and broadcasted to any current CalendarSessions to the associated Calendar. The Donor info should be updated (or created) via the Stripe webhook. Since the Donor will only fill out the form to purchase the days. We will be using the Stripe hosted checkout page. 

- We will need to track the purchase and it should have a relationship to the CalendarDay and Donor. The subsequent relations via the caledar day will be to the Campaign, CampaignParticipant, Champion, and Organization.

- An Organization will be able to have multiple Campaigns. The Champions will have a dashboard to see how their Participants are doing for a particular Campaign. 

- Organization admins will be able to see how a Campaign is going. 

- Users that can log in:
  - Org Admins
  - Org Champions

I want to use Devise. But also allow for Oauth via Google and Microsoft as most organizations I assume will already have emails via those providers. 

We will use [excid3/madmin: A robust Admin Interface for Ruby on Rails apps](https://github.com/excid3/madmin) for admin. 
